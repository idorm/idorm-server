plugins {
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'idorm'
version = '2.1.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jar {
    enabled = false
}

dependencies {
    // spring web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // spring data jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // spring database
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'

    // spring validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // spring mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // spring aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // sentry
    implementation 'io.sentry:sentry-spring-boot-starter:7.5.0'

    // crawling
    implementation 'org.jsoup:jsoup:1.15.3'

    // swagger ui
    implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'

    // aws s3
    implementation 'com.amazonaws:aws-java-sdk-s3'
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.1000')

    // fcm
    implementation 'com.google.firebase:firebase-admin:9.1.1'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // lombok
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    // mysql
    runtimeOnly 'com.mysql:mysql-connector-j'

    // querydsl
    implementation "com.querydsl:querydsl-jpa"
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // database migration
    implementation 'org.flywaydb:flyway-core:8.4.4'
    implementation 'org.flywaydb:flyway-mysql:8.4.4'

    // TODO: dev, prod 환경 반영 시 제거
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8'

    // monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // spring test
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Querydsl 설정 시작
def generated = 'src/main/generated'

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}
sourceSets {
    main.java.srcDirs += [ generated ]
}
clean {
    delete file(generated)
}
// Querydsl 설정 끝

/**
 * 커맨드라인으로 주어진 파라미터로 도커 이미지 빌드 및 레지스트리 업로드를 설정합니다.
 */
bootBuildImage {
    imageName = "${project.findProperty("dockerImageName") ?: project.name}:${project.findProperty("dockerTag") ?: project.version}"

    if (project.findProperty("dockerUrl") != null) {
        print("[bootBuildImage] 이미지 이름: $imageName")
        publish = true
        docker {
            publishRegistry {
                url = project.findProperty("dockerUrl")
                username = project.findProperty("dockerUsername")
                password = project.findProperty("dockerPassword")
            }
        }
    }
}