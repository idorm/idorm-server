plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'idorm'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'io.sentry:sentry-spring-boot-starter:6.2.1'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.7'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.2'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'
    implementation 'com.amazonaws:aws-java-sdk-s3'
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.1000')
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

/**
 * 커맨드라인으로 주어진 파라미터로 도커 이미지 빌드 및 레지스트리 업로드를 설정합니다.
 */
bootBuildImage {
    imageName = "${project.findProperty("dockerImageName") ?: project.name}:${project.findProperty("dockerTag") ?: project.version}"

    if (project.findProperty("dockerUrl") != null) {
        print("[bootBuildImage] 이미지 이름: $imageName")
        publish = true
        docker {
            publishRegistry {
                url = project.findProperty("dockerUrl")
                username = project.findProperty("dockerUsername")
                password = project.findProperty("dockerPassword")
            }
        }
    }
}